import m from "mithril";

//–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
//     App: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è: –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "Start" –Ω–∞–∂–∞—Ç–∞, –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç
//     Questionnaire: –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞

//Step(1): Questions and choices

// –¢–∏–ø—ã
type PlanName = string;
type PlanScore = number;
type Choice = {
    option: string;
    plans: Record<PlanName, PlanScore>;       // Define a type for a choice of plans, where the keys (PlanName) are strings and the values (PlanScore) are plan objects
}

interface Question {
    question: string;
    choices: Choice[];
}

//interface - —ç—Ç–æ —Ç–∏–ø –∫–æ—Ç–æ—Ä–∏–π –∑–∞–¥–∞–µ—Ç—Å—è –≤ TypeScript –¥–ª—è QuestionnaireState
interface QuestionnaireState {
    currentIndex: number;
    answers: Choice[];
    plan: string;
    hoverStates: Record<string, boolean>;   //Record<K, V> ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∂–µ–Ω–µ—Ä–∏–∫ —Ç–∏–ø –≤ TypeScript, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç: "–æ–±—ä–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª—é—á–∏ —Ç–∏–ø–∞ K, –∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ V". –ù–∞–ø—Ä–∏–º–µ—Ä "button1": true.
    selectedId?: string | null;            //?-–¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:–ü–æ–ª–µ selectedId –º–æ–∂–µ—Ç: –≤–æ–æ–±—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å [1. –ü–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª], –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (string)(2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç–ª–µ–º–µ–Ω—Ç), –∏–ª–∏ –±—ã—Ç—å null(3.–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è–ª –≤—ã–±–æ—Ä).
    animation: boolean;
    showResultContainer: boolean;
    showQuestionContainer: boolean;
    selectedIndex: number;

    topPlans: PlanName[];

    evaluateTopPlans(answers: Choice[]): string[];    //–∫–∞–∫–æ–π –ø–ª–∞–Ω –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç? –∏ –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ 2-–º –∏ 3-–º –º–µ—Å—Ç–µ –ø–æ —Ä–µ–π—Ç–µ–Ω–≥—É.
    moveToSelected(directionOrIndex: "prev" | "next" | number): void; //–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–æ–≤ –≤ –∫–æ–Ω—Ü–µ. –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: void (–Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç), –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ moveToSelected("prev"), moveToSelected("next") –∏–ª–∏ moveToSelected(3). –ù–æ –≤–º–µ—Å—Ç–µ-—ç—Ç–æ –ø—Ä–æ—â–µ –¥–ª—è API(Application Programming Interface)- "–Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥/–≤—Ö–æ–¥–æ–≤
   /* generateDescription(answers: Choice[], topPlans: string[]): string[];*/  //–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞, –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –≤ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –≤—Ö–æ–¥–∏—Ç —Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É.
    generatePlanDescriptions: (answers: any, topPlans: PlanName[]) => Record<PlanName, string>;
}

interface AppState {
    started: boolean;
    animation: boolean;
}

// –í–æ–ø—Ä–æ—Å—ã
const questions: Question[] = [
    {
        question: "How do you intend to use this mailbox ‚Äî for business or personal purposes?",
        choices: [
            {option: "For business purposes", plans: {Essential: 1, Advanced: 1, Unlimited: 1}},
            {option: "For personal use", plans: {Free: 1, Revolutionary: 1, Legend: 1}},
            {option: "I haven‚Äôt decided yet.", plans: {Free: 1}}
        ],
    },
   /* {
        question: "Would you like to add additional email addresses to this mailbox? If yes, how many do you require?",
        choices: [
            {option: "Yes, I‚Äôd like to", plans: {Revolutionary: 1, Legend: 1, Essential: 1, Advanced: 1, Unlimited: 1}},
            {option: "No, I don‚Äôt want to", plans: {Free: 1}}
        ],
    },*/
    {
        question: "Would you like to add additional email addresses to your mailbox? If yes, how many do you require?",
        choices: [
            {option: "1-15", plans: {Essential: 1, Revolutionary: 1}},
            {option: "16-30", plans: {Legend: 1, Unlimited: 1, Advanced: 1,}},
            {option: "No, I don‚Äôt want to", plans: {Free: 1}},
        ],
    },
   /* {
        question: "Would you like to use your own domain (e.g., yourcompany.com) with this mailbox?If yes, how many would you like to configure?",
        choices: [
            {
                option: "Yes, please",
                plans: {Revolutionary: 1, Legend: 1, Essential: 1, Advanced: 1, Unlimited: 1}
            },
            {option: "No, I don't need", plans: {Free: 1}}
        ],
    },*/
    {
        question: "Would you like to use your own domain (e.g., yourcompany.com) with this mailbox? If yes, how many would you like to configure?",
        choices: [
            {option: "1-3", plans: {Essential: 1, Revolutionary: 1}},
            {option: "4-10", plans: {Legend: 1, Advanced: 1}},
            {option: "Unlimited domains", plans: {Unlimited: 1}},
            {option: "No, I don't need", plans: {Free: 1}}
        ],
    },
    {
        question: "How many calendars do you plan to use?",
        choices: [
            {option: "One calendar", plans: {Free: 1}},
            {
                option: "Unlimited calendars",
                plans: {Revolutionary: 1, Legend: 1, Essential: 1, Advanced: 1, Unlimited: 1}
            }
        ],
    },
    {
        question: "What is your estimated email storage requirement?",
        choices: [
            {option: "1 GB", plans: {Free: 1}},
            {option: "2-20 GB", plans: {Revolutionary: 1}},
            {option: "21-50 GB", plans: {Essential: 1}},
            {option: "51-500 GB", plans: {Legend: 1, Advanced: 1}},
            {option: "501-1000 GB", plans: {Unlimited: 1}}
        ],
    }
];


interface PlanFeatures {
    usage: string;
    storage: string;
    emails: string;
    domains: string;
    calendars: string;
    labels?: string;
    family?: string;
}

const planDetails: Record<PlanName,PlanFeatures> = {
    Free: {
        usage: "For personal use",
        emails: "No extra email addresses",
        storage: "1 GB storage",
        domains: "No custom domains",
        labels: "3 labels",
        calendars: "üìÖ One calendar",
        family: "No Family option"
    },
    Revolutionary: {
        usage: "For personal use",
        emails: "15 extra email addresses",
        storage: "20 GB storage",
        domains: "3 custom domains",
        calendars: "Unlimited calendars",
        labels: "Unlimited labels",
        family: "Family option available"
    },
    Legend: {
        usage: "For personal use",
        emails: "30 extra email addresses",
        storage: "500 GB storage",
        domains: "10 custom domains",
        calendars: "Unlimited calendars",
        labels: "Unlimited labels",
        family: "Family option available"
    },
    Essential: {
        usage: "For business purposes",
        emails: "15 extra email addresses",
        storage: "50 GB storage",
        domains: "3 custom domains",
        calendars: "  Unlimited calendars",
        labels: "Unlimited labels",
    },
    Advanced: {
        usage: "For business purposes",
        emails: "30 extra addresses",
        storage: "500 GB storage",
        domains: "10 custom domains",
        calendars: "Unlimited calendars",
        labels: "Unlimited labels",
    },
    Unlimited: {
        usage: "For business purposes",
        emails: "30 extra addresses",
        storage: "1000 GB storage",
        domains: "Unlimited domains",
        calendars: "Unlimited calendars",
        labels: "Unlimited labels",
    }
};






// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Questionnaire
const Questionnaire: m.Component<{}, QuestionnaireState> = { //m.Component<{}, QuestionnaireState> - —ç—Ç–æ —Ç–∏–ø –≤ TypeScript, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Mithril. –£ —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}).–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–∏–ø–æ–º QuestionnaireState. (m.Component<Attrs, State> - Attrs-–¢–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–∞–Ω–Ω—ã–µ "—Å–Ω–∞—Ä—É–∂–∏"), State-–¢–∏–ø –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ(–¥–∞–Ω–Ω—ã–µ "–≤–Ω—É—Ç—Ä–∏")).
    //–ó–∞—á–µ–º –Ω—É–∂–µ–Ω oninit: 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ–ª–∞–≥–æ–≤, –ª–æ–≥–∏–∫–∏ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ. 3. –°–±—Ä–æ—Å –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö)
    // vnode.state ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ QuestionnaireState.
    // vnode.attrs ‚Äî –µ—Å–ª–∏ –±—ã –±—ã–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–æ –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ –∏—Ö –Ω–µ—Ç ‚Äî {}).

    oninit(vnode) {
        const state = vnode.state
        state.currentIndex = 0;
        state.answers = [];
        state.hoverStates = {};
        state.animation = false;
        state.showResultContainer = true;
        state.showQuestionContainer = true;
        state.selectedIndex = 1;
        state.topPlans = [];

        //------------------------------------------------------------------------Score for every plan------------------------------//
        state.evaluateTopPlans = (answers: Choice[]): string[] => {
            // –ù–∞–π–¥—ë–º 3 —Ç–∞—Ä–∏—Ñ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤
            const score: Record<PlanName, PlanScore> = {
                Free: 0,
                Revolutionary: 0,
                Legend: 0,
                Essential: 0,
                Advanced: 0,
                Unlimited: 0
            };

            for (const answer of answers) {                                              //1.–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É - answers:Choice[]= [{option: "For business purposes", plans: {Essential: 1, Advanced: 1, Unlimited: 1}}]
                for (const plan in answer.plans) {                                       //2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–∞–Ω—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö - –Ω–∞–ø—Ä–∏–º–µ—Ä Essential: 1
                    if (plan in score) {                                                 //3. –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –∏–º—è —Ç–∞—Ä–∏—Ñ–∞ –≤ –æ–±—ä–µ–∫—Ç–µ score.
                        score[plan as PlanName] += answer.plans[plan as PlanName];       // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫ –æ–±—â–µ–º—É —Å—á—ë—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
                    }
                }
            }

            //-------------------------------------------------------------------–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –ø–æ –æ–ø—Ä–æ—Å—É------------------------------------------------------------//
            const sorted = Object.entries(score)                          //1.–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –ø–∞—Ä —Å Object.entries() –∫–∞–∫ [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ]: [["Free", 3], ["Revolutionary", 2]..]
                .sort((a, b) => b[1] - a[1])  //2.–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤ (—Ç–æ –µ—Å—Ç—å –ø–æ –≤—Ç–æ—Ä–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ –ø–∞—Ä–µ):  (.sort() ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É. a - —ç—Ç–æ –Ω–∞–ø—Ä–∏–º–µ—Ä ["Free", 3] –∏ b - –º–æ–∂–µ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä –±—ã—Ç—å ["Legend", 5])
                .map(entry => entry[0]);                           //3.–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–∞—Ä–µ): ["Free", "Revolutionary" ...]
            return sorted.slice(0, 3);                                          //4.–û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏–º–µ–Ω–∏.
          //--------------------------------------------------------------------------------------------------------------------------------------------------//

            /* const result = Object.entries(score).reduce((max, curr) => curr[1] > max[1] ? curr : max);
             return result[0]; //–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞*/
        };

        //--------------------------------------------------------------------Final page: function to switch between "prev" and "next" or number------------------------------------------------//
        state.moveToSelected = (directionOrIndex: "prev" | "next" | number) => {
            let newIndex = vnode.state.selectedIndex;

            if (directionOrIndex === "prev") {
                newIndex = Math.max(0, newIndex - 1);
            } else if (directionOrIndex == "next") {
                newIndex = Math.min(2, newIndex + 1);
            } else {
                newIndex = directionOrIndex;
            }
            vnode.state.selectedIndex = newIndex;
        }
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//


        //-----------------------------------------------------------Function for the description generation----------------------------------------------------------------------------------------------//

        state.generatePlanDescriptions = (answers: Choice[], topPlans: string[]) => {
            const descriptions: Record<PlanName, string> = {};

                                                                                  //1.–°–æ–±–µ—Ä—ë–º option, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ selectedOptions –Ω–∞–ø—Ä–∏–º–µ—Ä const selectedOptions = [option: "I haven‚Äôt decided yet.", option: "No, I don‚Äôt want to", option: "No, I don't need", option: "One calendar" ]
            const selectedOptions = new Set<string>();

            for (const answer of answers) {                                        // selectedOptions = [option: "I haven‚Äôt decided yet.", option: "No, I don‚Äôt want to", option: "No, I don't need", option: "One calendar"]
                selectedOptions.add(answer.option);
            }


            for (const planName of topPlans) {                                     //2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —É –Ω–∞—Å –≤ —Ç–æ–ø 3 –ø–æ –æ–ø—Ä–æ—Å—É –Ω–ø. topPlans:PlanName[] = ["Free", "Revolutionary", "Advanced"]
                if (!planDetails[planName /*as PlanName*/]) continue;              //3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —ç—Ç–∏ —Ç–æ–ø 3 –ø–ª–∞–Ω–∞ —É –Ω–∞—Å –≤ planDetails –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.

                const included= new Set<string>();                                    //4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è:   //included,
                const extra: string[] = [];                                                                            //extra,
                const missing: string[] = [];                                                                              //missing


                for (const answer of answers) {                                     //5. –°—Ä–∞–≤–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–µ–º, —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ
                    if (answer.plans[planName] > 0) {
                        included.add(answer.option);                               //5.1. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é  –≤ included –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞-> –ø—Ä–∏–º–µ—Ä included = [option: "I haven‚Äôt decided yet.", option: "No, I don‚Äôt want to", option: "No, I don't need", option: "One calendar" ]
                    } else {
                        missing.push(answer.option);   //???                         //5.2. –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –≤ missing –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ -> –ø—Ä–∏–º–µ—Ä missing =
                    }
                }

                // –ù–∞—Ö–æ–¥–∏–º –≤—Å—ë, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ç–∞—Ä–∏—Ñ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–± —ç—Ç–æ–º –Ω–µ –ø—Ä–æ—Å–∏–ª
                const allFeatures = Object.values(planDetails[planName /*as PlanName*/]);                                 //need array from the object!
                for (const feature of allFeatures) {
                    const alreadyMentioned = [...included, ...missing].some(txt =>
                        feature.toLowerCase().includes(txt.toLowerCase())
                    );
                    if (!alreadyMentioned) {
                        extra.push(feature);
                    }
                }

                // –°–æ—Å—Ç–∞–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                let description = `üì¶ ${planName} is a recommended plan for you.`;

                if (included.size > 0) {
                    description += `‚úÖ Because it includes what you selected:` + [...included].map(i => `‚úî ${i}`);
                }

                if (extra.length > 0) {
                    description += `üéÅ  Also includes additional features:\n` + extra.map(i => `‚ûï ${i}`);
                }

                if (missing.length > 0) {
                    description += `‚ö† This plan does not include:\n` + missing.map(i => `‚úñ ${i}`);
                    description += `üí° Consider looking at alternatives (${topPlans[1]} or ${topPlans[2]}), they might include these.\n`;
                }

                descriptions[planName as PlanName] = description;
            }

            return descriptions;
        };


    },


    view: function (vnode) {
        const state = vnode.state;
        const showResultContainer = state.showResultContainer;
        const showQuestionContainer = state.showQuestionContainer;

           //result to show
        if (state.currentIndex >= questions.length) {
            const topPlans = state.evaluateTopPlans(state.answers);                                                       //TOP PLANS: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ "—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–ª–∞–Ω–æ–≤"
            state.topPlans = topPlans;                                                                                            //–∑–¥–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (topPlans) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (state) ‚Äî –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ topPlans. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è: –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –≤ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).
            const planDescriptions = state.generatePlanDescriptions(state.answers, topPlans);                   //DESCRIPTION: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ "planDescriptions"




            //---------------------------Logic for the carousel -------------------------------------//
            const getStyle = (index: number): any => {
                const base = {
                    position: "absolute",
                    transform: "translateY(-50%)",
                    transition: "all 0.6s ease",
                    borderRadius: "10px",
                    textAlign: "center",
                    fontSize: "20px",
                    opacity: 1,
                    zIndex: 1,
                    display: "flex",
                    justifyContent: "center",
                };

                if (index === state.selectedIndex) {
                    return {
                        ...base,
                        left: "50%",
                        transform: "translateX(-50%) translateY(0)",
                        zIndex: 10, //above div "next" and "prev"
                        width: "400px",
                        height: "620px",
                        backgroundColor: "#ecd9d9",
                        boxShadow: "-5px 1px 37px -13px #00000075",
                    };
                } else if (index === state.selectedIndex - 1) { // prev
                    return {
                        ...base,
                        left: "20%",
                        transform: "translateX(-60%) translateY(40px)",
                        opacity: 0.3,
                        /*  zIndex: 5,*/
                        width: "250px",
                        height: "600px",
                        backgroundColor: "#f8eded",
                        boxShadow: "10px 10px 5px #00000033",

                    };
                } else if (index === state.selectedIndex + 1) { //next
                    return {
                        ...base,
                        left: "80%",
                        transform: "translateX(-40%) translateY(40px)",
                        opacity: 0.3,
                        /*      zIndex: 5,*/
                        width: "250px",
                        height: "600px",
                        backgroundColor: "#f8eded",
                        boxShadow: "-21px 15px 18px 0px #00000033",
                    };
                } else {
                    return {display: "none"};
                }
            };
            //-----------------------------------------------------------------------------------------------//

//----------------------------------------------------------------------------------The result page for the 3Top plans------------------------------------------------------------------------------------------------------------//

            return showResultContainer && m("div", {
                style: {
                    maxWidth: "800px",
                    padding: "10px",
                    margin: "0 auto",
                    textAlign: "center",
                    fontFamily: "sans-serif",
                    boxSizing: "border-box"
                }
            }, [
                m("h2", {
                    style: "max-width: 800px; padding: 10px; margin: 0 auto; text-align: center;"
                }, "Recommended plan is:"),
                /*m("p", {
                    style: "max-width: 800px; padding: 10px; margin: 0 auto; text-align: center; font-size: 25px;"
                }, /!*state.plan*!/),*/
                //----------------------------------------------------added carousel here----------------------------------------//
                m("div", {
                    style: {
                        width: "100%",
                        height: "750px",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        position: "relative",
                        overflow: "hidden",
                        marginTop: "20px"
                    }
                }, [
                    m("div", {
                            style: {
                                position: "relative",
                                width: "100%",
                                height: "100%"
                            },
                            oncreate: ({dom}) => {


                                //-------------------------------mouseWheel to move sliders on the result page-------------------------------------------//
                                const onWheel: EventListener = (event) => {
                                    const e = event as WheelEvent;                                  //for Typeskript to understand what is for the event
                                    event.preventDefault();                                         //preventDefault ensures the page won‚Äôt scroll down. –ù–æ –±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—É–º–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ –±—É–¥–µ—à—å –Ω–∏—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å. –ü–æ—ç—Ç–æ–º—É –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preventDefault(), –µ—Å–ª–∏ —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª passive: false.

                                    if (e.deltaY > 0) {                                             //–∫–æ–≥–¥–∞ –∫–æ–ª–µ—Å–∏–∫–æ –º–∏—à–∏ –∫—Ä—É—á—É –∫ —Å–µ–±–µ - deltaY —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "next" –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ
                                        state.moveToSelected("next");
                                    } else {
                                        state.moveToSelected("prev");                              //–∏ –µ—Å–ª–∏ –æ—Ç —Å–µ–±—è —Ç–æ deltaY —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∏ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "prev".
                                    }
                                    m.redraw();
                                };

                                dom.addEventListener("wheel", onWheel, {passive: false}); //{passive: false}-–ì–æ–≤–æ—Ä—é –±—Ä–∞—É–∑–µ—Ä—É: –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å event.preventDefault() –≤–Ω—É—Ç—Ä–∏ onWheel".
                            }
                            //----------------------------------------------------------------------------------------------------------------------------//

                        },
                        //---------------------------------divs on the final pages: recommended and 2 alternatives--------------------------------------//
                        [
                            m("div", {                                                                  //right side "alternative"
                                style: getStyle(0),
                                onclick: () => state.moveToSelected(0)
                            }, [
                                m("div", {style: {width: "400px", borderRadius: "10px",}},
                                [m("p", {
                                    style: {
                                        background: "#e5a85b",
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "18px",
                                        margin: "0 auto",
                                        padding: "5px 0",
                                        borderRadius: "10px 10px 0 0",
                                        color: "white",
                                    }
                                }, "Alternative"),
                                    m("h3", {
                                        style: {
                                            /*background: "red", */
                                            position: "absolute",
                                            /*top: "1%",*/
                                            width: "100%",
                                            textAlign: "center",
                                            fontSize: "20px",
                                            margin: "40px auto 0 auto",
                                            padding: "5px 0",
                                            fontWeight: "normal",
                                        }
                                    }, state.topPlans?.[1] || ""),
                                m("p", {
                                    style: {
                                        marginTop: "120px",
                                        padding: "20px",
                                        fontSize: "14px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, planDescriptions[state.topPlans?.[1] as PlanName])]),
                                m("a", {
                                href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                target: "_blank",
                                style: {
                                    display: "block",
                                    textAlign: "center",
                                    color: "#ff0a0a",
                                    textDecoration: "none",
                                    cursor: "pointer",
                                    position:"absolute",
                                    padding: "10px 50px",
                                    borderRadius: "10px",
                                    backgroundColor: "#ffffff",
                                    bottom:"50px",
                                    border: "solid 2px",
                                }
                            }, "Get Started")]),



                            m("div", {                                                                     //central plan (top plan)
                                    style: getStyle(1),
                                    onclick: () => state.moveToSelected(1)
                                }, [
                                m("div", {style: {width: "400px", borderRadius: "10px",}},
                                    [m("p", {
                                        style: {
                                            background: "red",
                                            position: "absolute",
                                            /*top: "1%",*/
                                            width: "100%",
                                            textAlign: "center",
                                            fontSize: "18px",
                                            margin: "0 auto",
                                            padding: "5px 0",
                                            borderRadius: "10px 10px 0 0",
                                            color: "white",
                                        }
                                    }, "The best plan for you"),
                                        m("h3", {
                                        style: {
                                            /*background: "red", */
                                            position: "absolute",
                                            /*top: "1%",*/
                                            width: "100%",
                                            textAlign: "center",
                                            fontSize: "30px",
                                            margin: "40px auto 0 auto",
                                            padding: "5px 0",
                                            fontWeight:"normal",
                                        }
                                    }, state.topPlans?.[0] || ""), //–í view —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (index === 1) —Ä–µ–Ω–¥–µ—Ä–∏—Ç state.topPlans[0] ‚Äî –ª—É—á—à–∏–π —Ç–∞—Ä–∏—Ñ.
                                m("p", {
                                    style: {
                                        marginTop: "120px",
                                        padding: "20px",
                                        fontSize: "14px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, planDescriptions[state.topPlans?.[0] as PlanName])]),
                                m("a", {
                                    href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                    target: "_blank",
                                    style: {
                                        display: "block",
                                        textAlign: "center",
                                        color: "white",
                                        textDecoration: "none",
                                        cursor: "pointer",
                                        position:"absolute",
                                        padding: "10px 50px",
                                        borderRadius: "10px",
                                        backgroundColor: "#ff0a0a",
                                        bottom:"50px",
                                    }
                                }, "Get Started")]),



                            m("div", { //left side "alternative plan"
                                style: getStyle(2),
                                onclick: () => state.moveToSelected(2)
                            }, [
                                m("div", {style: {width: "400px", borderRadius: "10px",}},
                                [m("p", {
                                    style: {
                                        background: "#e5a85b",
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "18px",
                                        margin: "0 auto",
                                        padding: "5px 0",
                                        borderRadius: "10px 10px 0 0",
                                        color: "white",
                                    }
                                }, "Alternative"),
                                    m("h3", {
                                        style: {
                                            /*background: "red", */
                                            position: "absolute",
                                            /*top: "1%",*/
                                            width: "100%",
                                            textAlign: "center",
                                            fontSize: "20px",
                                            margin: "40px auto 0 auto",
                                            padding: "5px 0",
                                            fontWeight: "normal",
                                        }
                                    }, state.topPlans?.[2] || ""),
                                m("p", {
                                    style: {
                                        marginTop: "120px",
                                        padding: "20px",
                                        fontSize: "14px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, m.trust(planDescriptions[state.topPlans?.[2] as PlanName]))]),
                                m("a", {
                                    href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                    target: "_blank",
                                    style: {
                                        display: "block",
                                        textAlign: "center",
                                        color: "#ff0a0a",
                                        textDecoration: "none",
                                        cursor: "pointer",
                                        position:"absolute",
                                        padding: "10px 50px",
                                        borderRadius: "10px",
                                        backgroundColor: "#ffffff",
                                        bottom:"50px",
                                        border: "solid 2px",
                                    }
                                }, "Get Started")])]),
                //-----------------------------------------------------------------------------------------------------------//
                ]),
                m("button", {
                    style: {
                        width: "200px",
                        fontWeight: "700",
                        color: "#fff",
                        padding: "10px 0",
                        background: "linear-gradient(45deg, #ff1f4f, #d2002d 100%)",
                        borderRadius: "100px",
                        margin: "0 10px",
                        cursor: "pointer",
                        fontSize: "17px",
                        textAlign: "center",
                        minWidth: "60px",
                        height: "50px",
                    },
                    onclick: () => {
                        state.currentIndex = 0;
                        state.answers = [];
                        /*  state.plan = "";*/
                        /*for(let key in score) score[key as keyof typeof score]=0;*/
                    }
                }, "Try test again"),
                m("button", {
                    style: {
                        width: "200px",
                        fontWeight: "700",
                        color: "#850122",
                        padding: "10px 0",
                        background: "linear-gradient(45deg, rgb(153, 113, 122), rgb(53, 46, 60) 100%);",
                        borderRadius: "100px",
                        margin: "0 10px",
                        cursor: "pointer",
                        fontSize: "17px",
                        textAlign: "center",
                        minWidth: "60px",
                        height: "50px",
                    },
                    onclick: () => {
                        /* "this.parentNode.style.display = 'none';"*/
                        vnode.state.showResultContainer = false;
                    }
                }, "Close"),
                             ])}


//---------------------------------------------------------------------------------------------Current questions with options-----------------------------------------------------------------------//
        const current = questions[state.currentIndex];


        return showQuestionContainer && m("div", {
            style: {
                maxWidth: "800px",
                margin: "0 auto",
                fontFamily: "sans-serif",
                opacity: state.animation ? "0" : "1",
                transition: "opacity 0.6s ease-in-out"
            }
        }, [
            m("div", [
                m("button",
                    {
                        style: {
                            fontSize: "14px",
                            color: "#000",
                            textAlign: "center",
                            backgroundColor: "#3333330d",
                            marginRight: "2%",
                            marginTop: "1%",
                            float: "right",
                            borderRadius: "50%",
                            cursor: "pointer",
                            lineHeight: "20px",
                            padding: "0px 5px"

                        },
                        onclick: () => {
                            vnode.state.showQuestionContainer = false;
                        }
                    }, "x"),
                m("h2", {
                    style: {
                        padding: "30px 30px 10px 50px",
                        margin: 0,
                        fontSize: "18px"
                    }
                }, current.question),

            ]),
            m("ul", {
                style: {
                    listStyle: "none",
                    position: "relative",
                    padding: "0"
                }
            }, [
                ...current.choices.map((choice, index) => {
                    const inputId = `choice-${state.currentIndex}-${index}`;
                    const hoverKey = `${state.currentIndex}-${index}`;
                    const isHovered = state.hoverStates[hoverKey];

                    return m("li", {
                            onmouseover: () => {
                                state.hoverStates[hoverKey] = true;
                                m.redraw();
                            },
                            onmouseout: () => {
                                state.hoverStates[hoverKey] = false;
                                m.redraw();
                            },
                            style: {
                                listStyle: "none",
                                position: "relative",
                                borderTop: "1px solid #eee",
                                backgroundColor: isHovered ? "#ffedea" : "transparent",
                                transition: "background-color 0.2s"
                            }
                        }, m("label", {
                            for: inputId,
                            style: {
                                cursor: "pointer",
                                padding: "1.5rem 2.5rem 1.5rem 5rem",
                                position: "relative",
                                width: "100%",
                                margin: "0",
                                fontSize: "16px",
                                display: "inline-block",
                                verticalAlign: "middle",
                                lineHeight: "1.5",
                                boxSizing: "border-box"
                            }
                        }, [m("input[type=radio]", {
                            id: inputId,
                            name: `choice-${state.currentIndex}`,
                            value: choice,
                            style: {
                                cursor: "pointer",
                                display: "none"
                            },
                            onclick: () => {
                                state.selectedId = inputId;
                                state.animation = true; // —Å—Ç–∞—Ä—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                                m.redraw();

                                setTimeout(() => {
                                    state.answers.push(choice);
                                    state.currentIndex++;
                                    state.selectedId = null;
                                    state.animation = false; //–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                                    m.redraw();
                                }, 500) // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å transition: 0.5s
                            }
                        }),
                            m("", {
                                    style: {
                                        display: "flex",
                                        alignItems: "center",
                                        gap: "16px"
                                    }
                                },
                                m("span", {
                                        style: {
                                            width: "20px",
                                            height: "20px",
                                            border: "1px solid #bbb",
                                            borderRadius: "50%",
                                            background: state.selectedId === inputId ? "#d93951" : "transparent"
                                        }
                                    },
                                    state.selectedId === inputId ? m("span", {
                                        style: {
                                            color: "white"
                                        }
                                    }, m.trust("<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M416 128L192 384l-96-96\"/></svg>")) : ""),
                                m("span",
                                    choice.option))
                        ])
                    )
                })])]);
    },
};





//  –°—Ç–∞—Ä—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
const App: m.Component<{}, AppState> = {
    oninit(vnode) {
        vnode.state.started = false;
        vnode.state.animation = false;
        Object.assign(document.body.style, {
            margin: "0",
            padding: "0",
            background: "#eee",
            /* background: "#fff2ea",*/
            fontFamily: "sans-serif",
            boxSizing: "border-box"
        });    //styles to body
    },
    view(vnode) {
        return m("div", {style: "position: relative; max-width: 800px; margin: 40px auto 0 auto; background: #fff; border-radius: 20px;"}, [
            vnode.state.started
                ? m(Questionnaire)
                : m("div", {style: "max-width: 800px; padding: 10px; margin: 0 auto; /*text-align: center;*/; display: flex; flex-direction: row; justify-content: center; align-items: center; border-box: 20px;"},
                    [m("div", {
                            style: {
                                display: "flex",
                                justifyContent: "center",
                                flexDirection: "column",
                                maxWidth: "400px",
                                padding: "10px",
                                opacity: vnode.state.animation ? "0" : "1",
                                transition: "opacity 0.6s ease-in-out"
                            }
                        },
                        [m("p", {style: {fontSize: "18px",}}, "Confused about which plan to choose?"),
                            m("h2", {
                                style: {
                                    fontSize: "30px",
                                    padding: "5px 0px",
                                    margin: "auto",
                                }
                            }, "Take our 1-minute quiz to find your plan."),
                            m("p", "We‚Äôll show you the best match based on your needs and daily activities.")]),
                        m("button", {
                            style: {
                                width: "200px",
                                fontWeight: "700",
                                color: "#fff",
                                padding: "10px 0",
                                backgroundColor: "#850122",
                                borderRadius: "100px",
                                margin: "0 auto",
                                cursor: "pointer",
                                fontSize: "17px",
                                textAlign: "center",
                                minWidth: "60px",
                                height: "50px",
                                opacity: vnode.state.animation ? "0" : "1",
                                transition: "opacity 0.6s ease-in-out"
                            },
                            onmouseover: (e: Event) => {
                                (e.target as HTMLButtonElement).style.backgroundColor = "#be8f96";
                            },
                            onmouseout: (e: Event) => {
                                (e.target as HTMLButtonElement).style.backgroundColor = "#850122";
                            },
                            onclick: () => {
                                vnode.state.animation = true;
                                m.redraw();

                                setTimeout(() => {
                                    vnode.state.started = true;
                                    vnode.state.animation = false; // —Å–±—Ä–æ—Å
                                    m.redraw(); // –ø–æ–∫–∞–∑–∞—Ç—å Questionnaire
                                }, 600); // –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å transition
                            }
                        }, "Start Now")
                    ])
        ]);
    }
};


// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
m.mount(document.body, App);

/*


const businessPlans = ["Essential", "Advanced", "Unlimited"]
const privatePlans = ["Free", "Revolutionary", "Legend"]
const betterDescription = []


for (const answer of answers) {
    if(answer.option == "I haven‚Äôt decided yet." && topPlans.some(i => privatePlans.includes(i))) {betterDescription+= "For personal use"
    } else if (
        answer.option == "I haven‚Äôt decided yet." && topPlans.some(i => businessPlans.includes(i))) {
        betterDescription+= "For business use"
    } else if (answer.option == "1-15") {betterDescription += "15 extra email addresses"}
    else if(answer.option == "16-30") {
        betterDescription += "30 extra email addresses"
    } else if (answer.option == "No, I don‚Äôt want to" && )
}


*/






/*
const businessPlans = ["Essential", "Advanced", "Unlimited"]
const privatePlans = ["Free", "Revolutionary", "Legend"]
const betterDescription = []

switch(answer.option) {
    case "I haven‚Äôt decided yet." && topPlans.some(i => privatePlans.includes(i)):
        betterDescription += "For personal use";
        break;

    case "I haven‚Äôt decided yet." && topPlans.some(i => businessPlans.includes(i)):
        betterDescription += "For business use";
        break;

    case "1-15" :
        betterDescription += "15 extra email addresses";
        break;

    case "16-30":
        betterDescription += "30 extra email addresses"
        break;


}
*/


