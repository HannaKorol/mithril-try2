/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package backend; // ты положил свой документ в папку backend на компьютере, и теперь знаешь, где его искать.

//Импорт библиотек Jetty:

import jakarta.servlet.http.HttpServlet; //форма (сервлет), которая эти письма принимает и пишет ответы
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.eclipse.jetty.server.*; //Импортируем всё, что нужно от сервера Jetty

import java.io.IOException; //Может произойти ошибка при работе с текстом или сетью — говорим Java, что мы готовы к этому.

import org.eclipse.jetty.ee10.servlet.ServletContextHandler;

public class App {

	public static void main(String[] args) throws Exception {
		/*System.out.println(new App().getGreeting()); */                        //System.out.println()-  выводит строку "Hello World!" в консоль. Метод getGreeting() возвращает строку "Hello World!".

		//Создаем сервер на порту 9999
		Server server = new Server(9999);                                   //создание нового объекта сервера, который будет слушать порт 9999.
		ServerConnector connector = new ServerConnector(server);                 // создается соединение с сервером.
		server.addConnector(connector);                                          //подключаем созданный connector к серверу, чтобы сервер начал принимать запросы через этот соединитель.

		ServletContextHandler context = new ServletContextHandler();
		context.setContextPath("/");
		context.addServlet(PlanDetailsServlet.class, "/plan-details");

		server.setHandler(context);

		//Установка обработчика
		server.start();
		server.join();
	}

	//Когда все настроено, вы запускаете сервер Jetty через Gradle, и он будет слушать HTTP-запросы на порту, например, localhost:9999.

	public static class PlanDetailsServlet extends HttpServlet {
		@Override
		public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
			resp.setStatus(HttpServletResponse.SC_OK);
			resp.setHeader("Access-Control-Allow-Origin", "*"); //Доступ для всіх (публічний API)
			resp.setHeader("Access-Control-Allow-Methods", "GET");
			resp.setContentType("application/json; charset=UTF-8");

			String json = """
					{
					                          "Free": {
					                            "usage": "for personal use",
					                            "storage": "1 GB storage",
					                            "labels": "3 labels",
					                            "calendars": "1 calendar"
					                          },
					                          "Revolutionary": {
					                            "usage": "for personal use",
					                            "emails": "15 additional email addresses",
					                            "storage": "20 GB storage",
					                            "domains": "3 custom domains",
					                            "calendars": "Unlimited calendars",
					                            "labels": "Unlimited labels",
					                            "family": "Family option"
					                          },
					                          "Legend": {
					                            "usage": "for personal use",
					                            "emails": "30 additional email addresses",
					                            "storage": "500 GB storage",
					                            "domains": "10 custom domains",
					                            "calendars": "Unlimited calendars",
					                            "labels": "Unlimited labels",
					                            "family": "Family option"
					                          },
					                          "Essential": {
					                            "usage": "for business purposes",
					                            "emails": "15 additional email addresses",
					                            "storage": "50 GB storage",
					                            "domains": "3 custom domains",
					                            "calendars": "Unlimited calendars",
					                            "labels": "Unlimited labels"
					                          },
					                          "Advanced": {
					                            "usage": "for business purposes",
					                            "emails": "30 additional email addresses",
					                            "storage": "500 GB storage",
					                            "domains": "10 custom domains",
					                            "calendars": "Unlimited calendars",
					                            "labels": "Unlimited labels"
					                          },
					                          "Unlimited": {
					                            "usage": "for business purposes",
					                            "emails": "30 additional email addresses",
					                            "storage": "1000 GB storage",
					                            "domains": "Unlimited domains",
					                            "calendars": "Unlimited calendars",
					                            "labels": "Unlimited labels"
					                          }
					                        }
					""";
			resp.getWriter().write(json);
		}
	}
}






