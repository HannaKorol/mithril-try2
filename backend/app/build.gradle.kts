/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI (Command Line Interface) application in Java. он добавляет необходимые задачи и настройки, чтобы ваше приложение было выполнено как командная строка.
    application
}

repositories {
    // Use Maven Central for resolving dependencies. Репозиторий где ищем библиотеки для работы с Jetty (сервером) и JSON (формат передачи данных)..
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter) //testImplementation(jupiter): This means your test code depends on JUnit Jupiter (a testing library). It’s only available during testing — not in the final packaged app.

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application. Этот конфигурационный блок служит для указания зависимостей, которые являются необходимыми для компиляции проекта. а так же для его выполнения во время выполнения.
    implementation(libs.guava) //This means your main application code depends on the Guava library. Gradle will download it from a repository and include it on the compile and runtime classpaths.


    //Dependencies declared via configuration types → libs.junit.jupiter and libs.guava in our app.


    // Зависимости для работы с Jetty (сервер).  подключения плагина Jetty к системе Maven
    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server  // Для работы с HTTP-сервером
    implementation("org.eclipse.jetty:jetty-server:12.0.22")
    // https://mvnrepository.com/artifact/org.eclipse.jetty.ee10/jetty-ee10-servlet // Для работы с сервлетами
    implementation("org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.22")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(20))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("backend.App")
}

/*tasks.named<Test>("g") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}*/
