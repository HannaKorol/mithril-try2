import m from "mithril";
// –í–æ–ø—Ä–æ—Å—ã
const questions = [
    {
        question: "How do you intend to use this mailbox ‚Äî for business or personal purposes?",
        choices: [
            {
                option: "For business purposes",
                plans: { Free: 0, Revolutionary: 0, Legend: 0, Essential: 1, Advanced: 1, Unlimited: 1 }
            },
            {
                option: "For personal use",
                plans: { Free: 1, Revolutionary: 1, Legend: 1, Essential: 0, Advanced: 0, Unlimited: 0 }
            },
            { option: "I haven‚Äôt decided yet.", plans: { Free: 1 } }
        ],
    },
    {
        question: "Would you like to add additional email addresses to your mailbox? If so, how many?",
        choices: [
            { option: "15 additional email addresses", plans: { Essential: 1, Revolutionary: 1 } },
            { option: "30 additional email addresses", plans: { Legend: 1, Unlimited: 1, Advanced: 1, } },
            { option: "No, I don‚Äôt want to", plans: { Free: 1 } },
        ],
    },
    {
        question: "Would you like to use your own domain (e.g., yourcompany.com) with this mailbox? If yes, how many would you like to configure?",
        choices: [
            { option: "3 custom domains", plans: { Essential: 1, Revolutionary: 1 } },
            { option: "10 custom domains", plans: { Legend: 1, Advanced: 1 } },
            { option: "Unlimited domains", plans: { Unlimited: 1 } },
            { option: "No, I don't need", plans: { Free: 1 } }
        ],
    },
    {
        question: "How many calendars do you plan to use?",
        choices: [
            { option: "One calendar", plans: { Free: 1 } },
            {
                option: "Unlimited calendars",
                plans: { Revolutionary: 1, Legend: 1, Essential: 1, Advanced: 1, Unlimited: 1 }
            }
        ],
    },
    {
        question: "What is your estimated email storage requirement?",
        choices: [
            { option: "1 GB storage", plans: { Free: 1 } },
            { option: "20 GB storage", plans: { Revolutionary: 1 } },
            { option: "50 GB storage", plans: { Essential: 1 } },
            { option: "500 GB storage", plans: { Legend: 1, Advanced: 1 } },
            { option: "1000 GB storage", plans: { Unlimited: 1 } }
        ],
    }
];
const planDetails = {
    Free: {
        usage: "for personal use",
        /*emails: "‚úâ No additional email addresses",*/
        storage: "üóÑ 1 GB storage",
        /*domains: "No custom domains",*/
        labels: "üè∑Ô∏è 3 labels",
        calendars: "üóì One calendar",
        /* family: "No Family option"*/
    },
    Revolutionary: {
        usage: "for personal use",
        emails: "‚úâÔ∏è 15 additional email addresses",
        storage: "üóÑ 20 GB storage",
        domains: "üåê 3 custom domains",
        calendars: "üóì Unlimited calendars",
        labels: "üè∑Ô∏è Unlimited labels",
        family: "ü´Ç Family option"
    },
    Legend: {
        usage: "for personal use",
        emails: "‚úâÔ∏è 30 additional email addresses",
        storage: "üóÑ  500 GB storage",
        domains: "üåê 10 custom domains",
        calendars: "üóì Unlimited calendars",
        labels: "üè∑Ô∏è Unlimited labels",
        family: "ü´Ç Family option"
    },
    Essential: {
        usage: "for business purposes",
        emails: "‚úâÔ∏è 15 additional email addresses",
        storage: "üóÑ  50 GB storage",
        domains: "üåê 3 custom domains",
        calendars: "üóì Unlimited calendars",
        labels: "üè∑Ô∏è Unlimited labels",
    },
    Advanced: {
        usage: "for business purposes",
        emails: "‚úâÔ∏è 30 additional addresses",
        storage: "üóÑ  500 GB storage",
        domains: "üåê 10 custom domains",
        calendars: "üóì Unlimited calendars",
        labels: "üè∑Ô∏è Unlimited labels",
    },
    Unlimited: {
        usage: "for business purposes",
        emails: "‚úâÔ∏è 30 additional addresses",
        storage: "üóÑ 1000 GB storage",
        domains: "üåê Unlimited domains",
        calendars: "üóì Unlimited calendars",
        labels: "üè∑Ô∏è Unlimited labels",
    }
};
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Questionnaire
const Questionnaire = {
    //–ó–∞—á–µ–º –Ω—É–∂–µ–Ω oninit: 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ–ª–∞–≥–æ–≤, –ª–æ–≥–∏–∫–∏ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ. 3. –°–±—Ä–æ—Å –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö)
    // vnode.state ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ QuestionnaireState.
    // vnode.attrs ‚Äî –µ—Å–ª–∏ –±—ã –±—ã–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–æ –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ –∏—Ö –Ω–µ—Ç ‚Äî {}).
    oninit(vnode) {
        const state = vnode.state;
        state.currentIndex = 0;
        state.answers = [];
        state.hoverStates = {};
        state.animation = false;
        state.showResultContainer = true;
        state.showQuestionContainer = true;
        state.selectedIndex = 1;
        state.topPlans = [];
        //------------------------------------------------------------------------Score for every plan------------------------------//
        state.evaluateTopPlans = (answers) => {
            // –ù–∞–π–¥—ë–º 3 —Ç–∞—Ä–∏—Ñ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤
            const score = {
                Free: 0,
                Revolutionary: 0,
                Legend: 0,
                Essential: 0,
                Advanced: 0,
                Unlimited: 0
            };
            for (const answer of answers) { //1.–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É - answers:Choice[]= [{option: "For business purposes", plans: {Essential: 1, Advanced: 1, Unlimited: 1}}]
                for (const plan in answer.plans) { //2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–∞–Ω—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö - –Ω–∞–ø—Ä–∏–º–µ—Ä Essential: 1
                    if (plan in score) { //3. –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –∏–º—è —Ç–∞—Ä–∏—Ñ–∞ –≤ –æ–±—ä–µ–∫—Ç–µ score.
                        score[plan] += answer.plans[plan]; //4. –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫ –æ–±—â–µ–º—É —Å—á—ë—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.
                    }
                }
            }
            //-------------------------------------------------------------------–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –ø–æ –æ–ø—Ä–æ—Å—É------------------------------------------------------------//
            const sorted = Object.entries(score) //1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –ø–∞—Ä —Å Object.entries() –∫–∞–∫ [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ]: [["Free", 3], ["Revolutionary", 2]..]
                .sort((a, b) => b[1] - a[1]) //2. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤ (—Ç–æ –µ—Å—Ç—å –ø–æ –≤—Ç–æ—Ä–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ –ø–∞—Ä–µ):  (.sort() ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É. a - —ç—Ç–æ –Ω–∞–ø—Ä–∏–º–µ—Ä ["Free", 3] –∏ b - –º–æ–∂–µ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä –±—ã—Ç—å ["Legend", 5])
                .map(entry => entry[0]); //3. –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–∞—Ä–µ): ["Free", "Revolutionary" ...]
            return sorted.slice(0, 3); //4. –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏–º–µ–Ω–∏.
            //--------------------------------------------------------------------------------------------------------------------------------------------------//
        };
        //--------------------------------------------------------------------Final page: function to switch between "prev" and "next" or number------------------------------------------------//
        state.moveToSelected = (directionOrIndex) => {
            let newIndex = vnode.state.selectedIndex; //2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É—Ç—å –≤ newIndex.
            if (directionOrIndex === "prev") { //3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å "prev" —Ç–æ
                newIndex = Math.max(0, newIndex - 1); // –º–µ–Ω—è–µ–º –Ω–∞—à
            }
            else if (directionOrIndex == "next") {
                newIndex = Math.min(2, newIndex + 1);
            }
            else {
                newIndex = directionOrIndex;
            }
            vnode.state.selectedIndex = newIndex;
        };
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
        //-----------------------------------------------------------Function for the description generation----------------------------------------------------------------------------------------------//
        state.generatePlanDescriptions = (answers, topPlans) => {
            const descriptions = {};
            //----------------------------------------------------2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ "I haven‚Äôt decided yet.", "No, I don't need", "No, I don‚Äôt want to" --------------------------------------------------------------------------------//
            const neutralAnswers = new Set(["I haven‚Äôt decided yet.", "No, I don't need", "No, I don‚Äôt want to"]); //1.–°–æ–∑–¥–∞–µ–º —Å–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ new Set(["I haven‚Äôt decided yet.", "No, I don't need", "No, I don‚Äôt want to"].
            /*for (const answer of answers) {                                                                            //2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if(neutralAnswers.has(answer.option)) {                                                                //3. –ï—Å–ª–∏ –Ω–∞—à —Å–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤(neutralAnswers) –∏–º–µ—é—Ç —Ç–æ—Ç –∂–µ –æ—Ç–≤–µ—Ç, —á—Ç–æ –¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (answer.option), —Ç–æ
                    for(const plan of topPlans) {                                                                                //4. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–ª–∞–Ω—É –≤ —Ç–æ–ø –ø–ª–∞–Ω–∞—Ö, —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª—Å—è –ø–æ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏
                        if(!planDetails[plan]) continue;                                                                                 //5. –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞ –≤ planDetails, —Ç–æ –∏–≥–Ω–æ—Ä–∏–º –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ

                        if(answer.option === "No, I don‚Äôt want to" && planDetails[plan].emails ) {                                       //6. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "No, I don‚Äôt want to" –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–ª–∞–Ω–∞ –≤ planDetails –∏–º–µ–µ—Ç emails
                            answer.option = planDetails[plan].emails; }
                        else if (answer.option === "No, I don't need" && planDetails[plan].domains) {
                            answer.option = planDetails[plan].domains;
                        }
                    }
                }
            }*/
            for (let i = 0; i < topPlans.length; i++) { //2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ topPlans –Ω–∞–ø—Ä–∏–º–µ—Ä:PlanName[] = ["Free", "Revolutionary", "Advanced"]
                const topPlanName = topPlans[i]; //(–ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–ª–∞–Ω–∞)
                if (!planDetails[topPlanName])
                    continue; //3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ –µ—Å—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–ª–∞–Ω–æ–≤ –≤ –Ω–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–æ–≤ planDetails.
                const included = new Set(); //4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è:   //included,
                const extra = new Set(); //extra,
                const missing = new Set(); //missing
                for (const answer of answers) { //5. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç–≤–µ—Ç–∞—Ö
                    const isNeutral = neutralAnswers.has(answer.option); //6. –ï—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ (["I haven‚Äôt decided yet.", "No, I don't need", "No, I don‚Äôt want to"]) –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    const isIncluded = answer.plans[topPlanName] > 0; //7. –ï—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞—à —Ç–æ–ø –ø–ª–∞–Ω ["Free", "Revolutionary", "Advanced"]
                    if (answer.option === "I haven‚Äôt decided yet.")
                        continue; //8. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "I haven‚Äôt decided yet." - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    if (isNeutral && isIncluded) { //9. –ï—Å–ª–∏ 6. –∏ 7.
                        if (answer.option === "No, I don‚Äôt want to" && planDetails[topPlanName].emails) { //10. –ï—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç "No, I don‚Äôt want to" –∏ emails –≤ —Ç–æ–ø –ø–ª–∞–Ω–µ –≤ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–µ.
                            extra.add(planDetails[topPlanName].emails); //11. –¢–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—Å–µ—á—Ç–≤–æ –µ–º–µ–π–ª–æ–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–ø –ø–ª–∞–Ω–∞ –≤ –µ–∫—Å—Ç—Ä–∞
                        }
                        else if (answer.option === "No, I don't need" && planDetails[topPlanName].domains) { //12. –¢–∞–∫–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "No, I don't need" –∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–ø –ø–ª–∞–Ω–∞ –µ—Å—Ç—å –¥–æ–º–µ–Ω—ã —Ç–æ–≥–¥–∞
                            extra.add(planDetails[topPlanName].domains); //13. –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ–ø –ø–ª–∞–Ω–∞ –≤ –µ–∫—Å—Ç—Ä–∞
                        }
                        continue;
                    }
                    if (isNeutral && !isIncluded) {
                        continue;
                    }
                    if (!isNeutral && isIncluded) {
                        included.add(answer.option);
                    }
                    if (!isNeutral && !isIncluded) {
                        missing.add(answer.option);
                    }
                }
                //-------------------------------------------------------------------–î–æ–±–∞–≤–ª—è–µ–º usage –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫-----------------------------------------------------------------------------------------------------//
                let description = "";
                if (i == 0) {
                    description += `<p style="color: #410002; margin-bottom: 10px;">üéØ ${topPlans[0]} is a recommended plan for you.</p>`;
                }
                else if (i == 1) {
                    description += `<p style="color: #410002; margin-bottom: 10px;">üì¶ ${topPlans[1]} might be a good alternative for you.</p>`;
                }
                else {
                    description += `<p style="color: #410002; margin-bottom: 10px;">üì¶ ${topPlans[2]} might be a good alternative for you.</p>`;
                }
                //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                if (planDetails[topPlanName].usage) {
                    planDetails[topPlanName].usage.replace("üëî", "for business purposes");
                    description += `<p style="margin-top: -10px; margin-bottom: 10px;">This plan is <strong>${planDetails[topPlanName].usage.trim()}</strong>.</p>`;
                }
                //-------------------------------------------------INCLUDED, EXTRA, MISSING--------------------------------------------------//
                if (included.size > 0) {
                    description += `<p style="font-weight: bold; color: #410002;">‚úÖ This plan includes what you selected:</p>`;
                    description += `<ul style="list-style-type: none;">${[...included].map(i => `<li style="color: green;>‚úî ${i}</li>`).join("")}</ul>`;
                } /*else if(included.size == null) {
                    description += `<ul style="list-style-type: none;"></ul>`
                }*/
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∏—á–∏ –∏–∑ PlanDetails c included + missing
                /*  const allFeatures = Object.entries(planDetails[topPlanName])                                //need array from the object!
                      .filter(([key]) => key !== "usage") //–∏—Å–∫–ª—é—á–∞–µ–º usage
                      .map(([, value]) => typeof value === "string" ? value : null)
                      .filter((v): v is string => v !== null);
  
  
                  for (const feature of allFeatures) {
                      const alreadyMentioned = [...included, ...missing].some(txt =>
                          feature.toLowerCase().includes(txt.toLowerCase())
                      );
  
                      if (!alreadyMentioned) {
                          extra.add(feature);
                      }
                  }*/
                const allKeys = Object.keys(planDetails[topPlanName]).filter(k => k !== "usage");
                for (const key of allKeys) {
                    const feature = planDetails[topPlanName][key];
                    if (!feature)
                        continue;
                    const lowerIncluded = [...included].map(s => s.toLowerCase());
                    const lowerMissing = [...missing].map(s => s.toLowerCase());
                    const isAlreadyListed = lowerIncluded.includes(feature.toLowerCase()) || lowerMissing.includes(feature.toLowerCase());
                    if (!isAlreadyListed) {
                        extra.add(feature);
                    }
                }
                if (extra.size > 0) {
                    description += `<p style="color: #410002; font-weight: bold; margin-bottom: 10px; ">‚ûï Extra features:</p>`;
                    description += `<ul style="list-style-type: none;">${[...extra].map(i => `<li style="color: black;"> ${i}</li>`).join("")}</ul>`;
                }
                //--------------------------------------------------------------------MISSING---------------------------------------------------------------------------//
                if (missing.size > 0) {
                    description += `<p style="color: red; margin-bottom: 10px;">‚ùï Unfortunately, this plan does not <strong>include</strong>:</p>`;
                    description += `<ul style="list-style-type: none;">${[...missing].map(i => `<li style="color: black;">‚ùå ${i}</li>`).join("")}</ul>`;
                    //--------------------------------------------------------------------------Alternatives to consider---------------------------------------------------------------------------------//
                    if (i == 0) {
                        description += `<p style="color: red; margin-bottom: 10px;">üí° Consider looking at alternatives (${topPlans[1]} or ${topPlans[2]}), they might include these.</p>`;
                    }
                    else if (i == 1) {
                        description += `<p style="color: red; margin-bottom: 10px;">üí° Consider looking at alternatives (${topPlans[0]} or ${topPlans[2]}), they might include these.</p>`;
                    }
                    else {
                        description += `<p style="color: red; margin-bottom: 10px;">üí° Consider looking at alternatives (${topPlans[0]} or ${topPlans[1]}), they might include these.</p>`;
                    }
                    //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                    // ------------------------------------------------------------------------------------------------------------------------------------------------------------//
                }
                descriptions[topPlanName] = description;
            }
            return descriptions;
        };
    },
    view: function (vnode) {
        const state = vnode.state;
        const showResultContainer = state.showResultContainer;
        const showQuestionContainer = state.showQuestionContainer;
        //result to show
        if (state.currentIndex >= questions.length) {
            const topPlans = state.evaluateTopPlans(state.answers); //TOP PLANS: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ "—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–ª–∞–Ω–æ–≤"
            state.topPlans = topPlans; //–∑–¥–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (topPlans) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (state) ‚Äî –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ topPlans. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è: –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –≤ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).
            const planDescriptions = state.generatePlanDescriptions(state.answers, topPlans); //DESCRIPTION: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ "planDescriptions"
            //---------------------------Logic for the carousel -------------------------------------//
            const getStyle = (index) => {
                const base = {
                    position: "absolute",
                    transform: "translateY(-50%)",
                    transition: "all 0.6s ease",
                    borderRadius: "10px",
                    textAlign: "center",
                    /*fontSize: "20px",*/
                    opacity: 1,
                    zIndex: 1,
                    display: "flex",
                    justifyContent: "center",
                };
                if (index === state.selectedIndex) {
                    return {
                        ...base,
                        left: "50%",
                        transform: "translateX(-50%) translateY(0)",
                        zIndex: 10, //above div "next" and "prev"
                        width: "400px",
                        height: "620px",
                        fontSize: "14px",
                        backgroundColor: "#ecd9d9",
                        boxShadow: "-5px 1px 37px -13px #00000075",
                    };
                }
                else if (index === state.selectedIndex - 1) { // prev
                    return {
                        ...base,
                        left: "20%",
                        transform: "translateX(-60%) translateY(40px)",
                        opacity: 0.3,
                        /*  zIndex: 5,*/
                        fontSize: "11px",
                        width: "250px",
                        height: "600px",
                        backgroundColor: "#f8eded",
                        boxShadow: "10px 10px 5px #00000033",
                    };
                }
                else if (index === state.selectedIndex + 1) { //next
                    return {
                        ...base,
                        left: "80%",
                        transform: "translateX(-40%) translateY(40px)",
                        opacity: 0.3,
                        /*      zIndex: 5,*/
                        width: "250px",
                        height: "600px",
                        backgroundColor: "#f8eded",
                        boxShadow: "-21px 15px 18px 0px #00000033",
                        fontSize: "11px",
                    };
                }
                else {
                    return { display: "none" };
                }
            };
            //-----------------------------------------------------------------------------------------------//
            //----------------------The result page for the 3Top plans------------------------------------------------------------------------------------------------------------//
            return showResultContainer && m("div", {
                style: {
                    maxWidth: "800px",
                    padding: "10px",
                    margin: "0 auto",
                    textAlign: "center",
                    fontFamily: "sans-serif",
                    boxSizing: "border-box"
                }
            }, [
                m("h2", {
                    style: "max-width: 800px; padding: 10px; margin: 0 auto; text-align: center;"
                }, "Recommended plan is:"),
                /*m("p", {
                    style: "max-width: 800px; padding: 10px; margin: 0 auto; text-align: center; font-size: 25px;"
                }, /!*state.plan*!/),*/
                //-----------------------------added carousel here----------------------------------------//
                m("div", {
                    style: {
                        width: "100%",
                        height: "750px",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        position: "relative",
                        overflow: "hidden",
                        marginTop: "20px"
                    }
                }, [
                    m("div", {
                        style: {
                            position: "relative",
                            width: "100%",
                            height: "100%"
                        },
                        oncreate: ({ dom }) => {
                            //-------------------------------mouseWheel to move sliders on the result page-------------------------------------------//
                            const onWheel = (event) => {
                                const e = event; //for Typeskript to understand what is for the event
                                event.preventDefault(); //preventDefault ensures the page won‚Äôt scroll down. –ù–æ –±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—É–º–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ –±—É–¥–µ—à—å –Ω–∏—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å. –ü–æ—ç—Ç–æ–º—É –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preventDefault(), –µ—Å–ª–∏ —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª passive: false.
                                if (e.deltaY > 0) { //–∫–æ–≥–¥–∞ –∫–æ–ª–µ—Å–∏–∫–æ –º–∏—à–∏ –∫—Ä—É—á—É –∫ —Å–µ–±–µ - deltaY —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "next" –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ
                                    state.moveToSelected("next");
                                }
                                else {
                                    state.moveToSelected("prev"); //–∏ –µ—Å–ª–∏ –æ—Ç —Å–µ–±—è —Ç–æ deltaY —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∏ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "prev".
                                }
                                m.redraw();
                            };
                            dom.addEventListener("wheel", onWheel, { passive: false }); //{passive: false}-–ì–æ–≤–æ—Ä—é –±—Ä–∞—É–∑–µ—Ä—É: –ü–æ–∑–≤–æ–ª—å –º–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å event.preventDefault() –≤–Ω—É—Ç—Ä–∏ onWheel".
                        }
                        //----------------------------------------------------------------------------------------------------------------------------//
                    }, 
                    //---------------------------------Top plans on the final pages: 1 best and 2 alternatives--------------------------------------//
                    [
                        m("div", {
                            style: getStyle(0),
                            onclick: () => state.moveToSelected(0)
                        }, [
                            m("div", { style: { width: "400px", borderRadius: "10px", } }, [m("p", {
                                    style: {
                                        background: "#e5a85b",
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "18px",
                                        margin: "0 auto",
                                        padding: "5px 0",
                                        borderRadius: "10px 10px 0 0",
                                        color: "white",
                                    }
                                }, "Alternative"),
                                m("h3", {
                                    style: {
                                        /*background: "red", */
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "20px",
                                        margin: "40px auto 0 auto",
                                        padding: "5px 0",
                                        fontWeight: "normal",
                                    }
                                }, state.topPlans?.[1] || ""),
                                m("div", {
                                    style: {
                                        marginTop: "60px",
                                        padding: "20px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, [m.trust(planDescriptions[state.topPlans?.[1]])])]),
                            m("a", {
                                href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                target: "_blank",
                                style: {
                                    display: "block",
                                    textAlign: "center",
                                    color: "#ff0a0a",
                                    textDecoration: "none",
                                    cursor: "pointer",
                                    position: "absolute",
                                    padding: "10px 50px",
                                    borderRadius: "10px",
                                    backgroundColor: "#ffffff",
                                    bottom: "50px",
                                    border: "solid 2px",
                                }
                            }, "Get Started")
                        ]),
                        m("div", {
                            style: getStyle(1),
                            onclick: () => state.moveToSelected(1)
                        }, [
                            m("div", { style: { width: "400px", borderRadius: "10px", } }, [m("p", {
                                    style: {
                                        background: "#d93951",
                                        position: "absolute",
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "18px",
                                        margin: "0 auto",
                                        padding: "5px 0",
                                        borderRadius: "10px 10px 0 0",
                                        color: "white",
                                    }
                                }, "The best plan for you"),
                                m("h3", {
                                    style: {
                                        position: "absolute",
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "30px",
                                        margin: "40px auto 0 auto",
                                        padding: "5px 0",
                                        fontWeight: "normal",
                                    }
                                }, state.topPlans?.[0] || ""), //–í view —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (index === 1) —Ä–µ–Ω–¥–µ—Ä–∏—Ç state.topPlans[0] ‚Äî –ª—É—á—à–∏–π —Ç–∞—Ä–∏—Ñ.
                                m("div", {
                                    style: {
                                        marginTop: "60px",
                                        padding: "20px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, [m.trust(planDescriptions[state.topPlans?.[0]])])]),
                            m("a", {
                                href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                target: "_blank",
                                style: {
                                    display: "block",
                                    textAlign: "center",
                                    color: "white",
                                    textDecoration: "none",
                                    cursor: "pointer",
                                    position: "absolute",
                                    padding: "10px 50px",
                                    borderRadius: "10px",
                                    backgroundColor: "#ff0a0a",
                                    bottom: "50px",
                                }
                            }, "Get Started")
                        ]),
                        m("div", {
                            style: getStyle(2),
                            onclick: () => state.moveToSelected(2)
                        }, [
                            m("div", { style: { width: "400px", borderRadius: "10px", } }, [m("p", {
                                    style: {
                                        background: "#e5a85b",
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "18px",
                                        margin: "0 auto",
                                        padding: "5px 0",
                                        borderRadius: "10px 10px 0 0",
                                        color: "white",
                                    }
                                }, "Alternative"),
                                m("h3", {
                                    style: {
                                        /*background: "red", */
                                        position: "absolute",
                                        /*top: "1%",*/
                                        width: "100%",
                                        textAlign: "center",
                                        fontSize: "20px",
                                        margin: "40px auto 0 auto",
                                        padding: "5px 0",
                                        fontWeight: "normal",
                                    }
                                }, state.topPlans?.[2] || ""),
                                m("div", {
                                    style: {
                                        marginTop: "60px",
                                        padding: "20px",
                                        color: "#333",
                                        textAlign: "left"
                                    }
                                }, [m.trust(planDescriptions[state.topPlans?.[2]])])]),
                            m("a", {
                                href: "https://app.tuta.com/signup#subscription=advanced&type=business&interval=12",
                                target: "_blank",
                                style: {
                                    display: "block",
                                    textAlign: "center",
                                    color: "#ff0a0a",
                                    textDecoration: "none",
                                    cursor: "pointer",
                                    position: "absolute",
                                    padding: "10px 50px",
                                    borderRadius: "10px",
                                    backgroundColor: "#ffffff",
                                    bottom: "50px",
                                    border: "solid 2px",
                                }
                            }, "Get Started")
                        ])
                    ]),
                    //-----------------------------------------------------------------------------------------------------------//
                ]),
                m("button", {
                    style: {
                        width: "200px",
                        fontWeight: "700",
                        color: "#fff",
                        padding: "10px 0",
                        background: "linear-gradient(45deg, #ff1f4f, #d2002d 100%)",
                        borderRadius: "100px",
                        margin: "0 10px",
                        cursor: "pointer",
                        fontSize: "17px",
                        textAlign: "center",
                        minWidth: "60px",
                        height: "50px",
                    },
                    onclick: () => {
                        state.currentIndex = 0;
                        state.answers = [];
                        /*  state.plan = "";*/
                        /*for(let key in score) score[key as keyof typeof score]=0;*/
                    }
                }, "Try test again"),
                m("button", {
                    style: {
                        width: "200px",
                        fontWeight: "700",
                        color: "#850122",
                        padding: "10px 0",
                        background: "linear-gradient(45deg, rgb(153, 113, 122), rgb(53, 46, 60) 100%);",
                        borderRadius: "100px",
                        margin: "0 10px",
                        cursor: "pointer",
                        fontSize: "17px",
                        textAlign: "center",
                        minWidth: "60px",
                        height: "50px",
                    },
                    onclick: () => {
                        /* "this.parentNode.style.display = 'none';"*/
                        vnode.state.showResultContainer = false;
                    }
                }, "Close"),
            ]);
        }
        //---------------------------------------------------------------------------------------------Current questions with options-----------------------------------------------------------------------//
        const current = questions[state.currentIndex];
        return showQuestionContainer && m("div", {
            style: {
                maxWidth: "800px",
                margin: "0 auto",
                fontFamily: "sans-serif",
                opacity: state.animation ? "0" : "1",
                transition: "opacity 0.6s ease-in-out"
            }
        }, [
            m("div", [
                m("button", {
                    style: {
                        fontSize: "14px",
                        color: "#000",
                        textAlign: "center",
                        backgroundColor: "#3333330d",
                        marginRight: "2%",
                        marginTop: "1%",
                        float: "right",
                        borderRadius: "50%",
                        cursor: "pointer",
                        lineHeight: "20px",
                        padding: "0px 5px"
                    },
                    onclick: () => {
                        vnode.state.showQuestionContainer = false;
                    }
                }, "x"),
                m("h2", {
                    style: {
                        padding: "30px 30px 10px 50px",
                        margin: 0,
                        fontSize: "18px"
                    }
                }, current.question),
            ]),
            m("ul", {
                style: {
                    listStyle: "none",
                    position: "relative",
                    padding: "0"
                }
            }, [
                ...current.choices.map((choice, index) => {
                    const inputId = `choice-${state.currentIndex}-${index}`;
                    const hoverKey = `${state.currentIndex}-${index}`;
                    const isHovered = state.hoverStates[hoverKey];
                    return m("li", {
                        onmouseover: () => {
                            state.hoverStates[hoverKey] = true;
                            m.redraw();
                        },
                        onmouseout: () => {
                            state.hoverStates[hoverKey] = false;
                            m.redraw();
                        },
                        style: {
                            listStyle: "none",
                            position: "relative",
                            borderTop: "1px solid #eee",
                            backgroundColor: isHovered ? "#ffedea" : "transparent",
                            transition: "background-color 0.2s"
                        }
                    }, m("label", {
                        for: inputId,
                        style: {
                            cursor: "pointer",
                            padding: "1.5rem 2.5rem 1.5rem 5rem",
                            position: "relative",
                            width: "100%",
                            margin: "0",
                            fontSize: "16px",
                            display: "inline-block",
                            verticalAlign: "middle",
                            lineHeight: "1.5",
                            boxSizing: "border-box"
                        }
                    }, [m("input[type=radio]", {
                            id: inputId,
                            name: `choice-${state.currentIndex}`,
                            value: choice,
                            style: {
                                cursor: "pointer",
                                display: "none"
                            },
                            onclick: () => {
                                state.selectedId = inputId;
                                state.animation = true; // —Å—Ç–∞—Ä—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                                m.redraw();
                                setTimeout(() => {
                                    state.answers.push(choice);
                                    state.currentIndex++;
                                    state.selectedId = null;
                                    state.animation = false; //–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                                    m.redraw();
                                }, 500); // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å transition: 0.5s
                            }
                        }),
                        m("", {
                            style: {
                                display: "flex",
                                alignItems: "center",
                                gap: "16px"
                            }
                        }, m("span", {
                            style: {
                                width: "20px",
                                height: "20px",
                                border: "1px solid #bbb",
                                borderRadius: "50%",
                                background: state.selectedId === inputId ? "#d93951" : "transparent"
                            }
                        }, state.selectedId === inputId ? m("span", {
                            style: {
                                color: "white"
                            }
                        }, m.trust("<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M416 128L192 384l-96-96\"/></svg>")) : ""), m("span", choice.option))
                    ]));
                })
            ])
        ]);
    },
};
//  –°—Ç–∞—Ä—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
const App = {
    oninit(vnode) {
        vnode.state.started = false;
        vnode.state.animation = false;
        Object.assign(document.body.style, {
            margin: "0",
            padding: "0",
            background: "#eee",
            /* background: "#fff2ea",*/
            fontFamily: "sans-serif",
            boxSizing: "border-box"
        }); //styles to body
    },
    view(vnode) {
        return m("div", { style: "position: relative; max-width: 800px; margin: 40px auto 0 auto; background: #fff; border-radius: 20px;" }, [
            vnode.state.started
                ? m(Questionnaire)
                : m("div", { style: "max-width: 800px; padding: 10px; margin: 0 auto; /*text-align: center;*/; display: flex; flex-direction: row; justify-content: center; align-items: center; border-box: 20px;" }, [m("div", {
                        style: {
                            display: "flex",
                            justifyContent: "center",
                            flexDirection: "column",
                            maxWidth: "400px",
                            padding: "10px",
                            opacity: vnode.state.animation ? "0" : "1",
                            transition: "opacity 0.6s ease-in-out"
                        }
                    }, [m("p", { style: { fontSize: "18px", } }, "Confused about which plan to choose?"),
                        m("h2", {
                            style: {
                                fontSize: "30px",
                                padding: "5px 0px",
                                margin: "auto",
                            }
                        }, "Take our 1-minute quiz to find your plan."),
                        m("p", "We‚Äôll show you the best match based on your needs and daily activities.")]),
                    m("button", {
                        style: {
                            width: "200px",
                            fontWeight: "700",
                            color: "#fff",
                            padding: "10px 0",
                            backgroundColor: "#850122",
                            borderRadius: "100px",
                            margin: "0 auto",
                            cursor: "pointer",
                            fontSize: "17px",
                            textAlign: "center",
                            minWidth: "60px",
                            height: "50px",
                            opacity: vnode.state.animation ? "0" : "1",
                            transition: "opacity 0.6s ease-in-out"
                        },
                        onmouseover: (e) => {
                            e.target.style.backgroundColor = "#be8f96";
                        },
                        onmouseout: (e) => {
                            e.target.style.backgroundColor = "#850122";
                        },
                        onclick: () => {
                            vnode.state.animation = true;
                            m.redraw();
                            setTimeout(() => {
                                vnode.state.started = true;
                                vnode.state.animation = false; // —Å–±—Ä–æ—Å
                                m.redraw(); // –ø–æ–∫–∞–∑–∞—Ç—å Questionnaire
                            }, 600); // –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å transition
                        }
                    }, "Start Now")
                ])
        ]);
    }
};
// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
m.mount(document.body, App);
/*


const businessPlans = ["Essential", "Advanced", "Unlimited"]
const privatePlans = ["Free", "Revolutionary", "Legend"]
const betterDescription = []

const revolutionaryPlan


for (const answer of answers) {
    if(answer.option == "I haven‚Äôt decided yet." && topPlans.some(i => privatePlans.includes(i))) {betterDescription+= "For personal use"
    } else if (
        answer.option == "I haven‚Äôt decided yet." && topPlans.some(i => businessPlans.includes(i))) {
        betterDescription+= "For business use"



*/
/*
const businessPlans = ["Essential", "Advanced", "Unlimited"]
const privatePlans = ["Free", "Revolutionary", "Legend"]
const betterDescription = []

switch(answer.option) {
    case "I haven‚Äôt decided yet." && topPlans.some(i => privatePlans.includes(i)):
        betterDescription += "For personal use";
        break;

    case "I haven‚Äôt decided yet." && topPlans.some(i => businessPlans.includes(i)):
        betterDescription += "For business use";
        break;

    case "1-15" :
        betterDescription += "15 extra email addresses";
        break;

    case "16-30":
        betterDescription += "30 extra email addresses"
        break;


}
*/
